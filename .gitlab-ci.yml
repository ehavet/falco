variables:
  NODE_VERSION: "14.4.0"
  NODE_IMAGE: "node:$NODE_VERSION"
  POSTGRES_VERSION: "11.7"
  POSTGRES_IMAGE: "postgres:$POSTGRES_VERSION-alpine"
  POSTGRES_DB: test
  POSTGRES_USER: test
  POSTGRES_PASSWORD: test
  POSTGRES_HOST_AUTH_METHOD: trust
  DATABASE_URL: "postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres:5432/$POSTGRES_DB"

stages:
  - install
  - syntax
  - quality
  - build
  - test

default:
  image: "$NODE_IMAGE"

# Cache modules in between jobs
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - node_modules/

"Install Dependencies":
  stage: install
  script:
    - yarn install
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
    policy: pull-push
  tags:
    - docker

"Check Syntax":
  stage: syntax
  script:
    - yarn lint
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
    policy: pull
  tags:
    - docker

"Audit Dependencies":
  stage: quality
  script:
    - yarn audit --audit-level=moderate
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
    policy: pull
  tags:
    - docker

"Build Project":
  stage: build
  script:
    - yarn build
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
      - dist/
    policy: pull-push
  tags:
    - docker

"Run Unit & Integration Tests":
  stage: test
  services:
    - "$POSTGRES_IMAGE"
  script:
    # No CCA step run as container are only used for test purpose
    - yarn db:migrate
    - yarn db:seed
    - yarn test:ci
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  artifacts:
    when: always
    paths:
      - coverage
    expire_in: 10 days
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - node_modules/
      - dist/
    policy: pull
  tags:
    - docker